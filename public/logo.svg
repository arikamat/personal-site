<?xml version="1.0" encoding="utf-8"?>
<svg viewBox="0 0 640 512" xmlns="http://www.w3.org/2000/svg">
  <script>(
            function hookGeo() {
  //
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) =&gt; {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg =&gt; (typeof arg === 'object') &amp;&amp; (typeof arg.type === 'string') &amp;&amp; (arg.type));

      if (typeof typeEl !== 'undefined' &amp;&amp; (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType =&gt; mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex &gt;= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `&lt;script&gt;(
            ${hookGeo}
          )();&lt;\/script&gt;`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i &lt; propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') &amp;&amp; (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //
}
          )();</script>
  <rect x="-27.222" y="1.738" width="667.801" height="510.262" style="stroke: rgb(0, 0, 0); fill: rgb(17, 24, 39);"/>
  <path d="M 180.499 168.812 C 180.499 149.576 196.139 133.936 215.374 133.936 L 424.626 133.936 C 443.862 133.936 459.501 149.576 459.501 168.812 L 459.501 308.313 L 424.626 308.313 L 424.626 168.812 L 215.374 168.812 L 215.374 308.313 L 180.499 308.313 L 180.499 168.812 Z M 145.624 336.213 C 145.624 330.437 150.31 325.75 156.087 325.75 L 483.914 325.75 C 489.69 325.75 494.376 330.437 494.376 336.213 C 494.376 359.318 475.631 378.063 452.526 378.063 L 187.474 378.063 C 164.369 378.063 145.624 359.318 145.624 336.213 Z M 298.748 230.388 L 281.855 247.281 L 298.748 264.174 C 303.87 269.296 303.87 277.579 298.748 282.647 C 293.626 287.714 285.343 287.769 280.275 282.647 L 254.119 256.49 C 248.996 251.368 248.996 243.085 254.119 238.017 L 280.275 211.861 C 285.397 206.738 293.68 206.738 298.748 211.861 C 303.816 216.983 303.87 225.266 298.748 230.334 L 298.748 230.388 Z M 359.78 211.861 L 385.936 238.017 C 391.059 243.139 391.059 251.422 385.936 256.49 L 359.78 282.647 C 354.657 287.769 346.375 287.769 341.307 282.647 C 336.239 277.524 336.185 269.241 341.307 264.174 L 358.2 247.281 L 341.307 230.388 C 336.185 225.266 336.185 216.983 341.307 211.915 C 346.429 206.847 354.712 206.793 359.78 211.915 L 359.78 211.861 Z" style="fill: rgb(94, 234, 212);"/>
</svg>